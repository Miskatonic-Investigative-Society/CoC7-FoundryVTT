{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/pdfoundry/Api.ts","src/pdfoundry/Main.ts","src/pdfoundry/Setup.ts","src/pdfoundry/Util.ts","src/pdfoundry/app/PDFItemSheet.ts","src/pdfoundry/app/PlayerSelect.ts","src/pdfoundry/cache/CacheError.ts","src/pdfoundry/cache/CacheHelper.ts","src/pdfoundry/cache/PDFCache.ts","src/pdfoundry/common/helpers/events.ts","src/pdfoundry/enricher/HTMLEnricher.ts","src/pdfoundry/enricher/TinyMCEPlugin.ts","src/pdfoundry/settings/I18n.ts","src/pdfoundry/settings/Settings.ts","src/pdfoundry/socket/Socket.ts","src/pdfoundry/socket/events/PreloadEvent.ts","src/pdfoundry/socket/events/SetViewEvent.ts","src/pdfoundry/socket/events/SocketEvent.ts","src/pdfoundry/viewer/Viewer.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { fileExists, getAbsoluteURL, getPDFDataFromItem, validateAbsoluteURL } from './Util';\r\nimport Viewer from './viewer/Viewer';\r\nimport { PDFData } from './common/types/PDFData';\r\nimport Settings from './settings/Settings';\r\nimport PDFCache from './cache/PDFCache';\r\n\r\n/**\r\n * A function to passed to getPDFData to find user specified PDF data.\r\n */\r\ntype ItemComparer = (item: Item) => boolean;\r\n\r\n/**\r\n * Open the specified PDF in a provided viewer\r\n * @param viewer\r\n * @param url\r\n * @param page\r\n * @param cache\r\n * @private\r\n */\r\nasync function _handleOpen(viewer: Viewer, url: string, page: number, cache: boolean) {\r\n    if (cache) {\r\n        const cachedBytes = await PDFCache.getCache(url);\r\n        // If we have a cache hit open the cached data\r\n        if (cachedBytes) {\r\n            await viewer.open(cachedBytes, page);\r\n        } else {\r\n            // Otherwise we should open it by url\r\n            await viewer.open(url, page);\r\n            // And when the download is complete set the cache\r\n            viewer.download().then((bytes) => {\r\n                PDFCache.setCache(url, bytes);\r\n            });\r\n        }\r\n    } else {\r\n        await viewer.open(url, page);\r\n    }\r\n}\r\n\r\n/**\r\n * The PDFoundry API\r\n *\r\n * ## You can access the API with `ui.PDFoundry`.\r\n */\r\nexport default class Api {\r\n    /**\r\n     * Enable additional debug information for the specified category.\r\n     * @category Debug\r\n     */\r\n    public static DEBUG = {\r\n        /**\r\n         * When set to true, enables the logging event names and arguments to console.\r\n         */\r\n        EVENTS: false,\r\n    };\r\n\r\n    // <editor-fold desc=\"GetPDFData Methods\">\r\n\r\n    /**\r\n     * Helper method. Alias for {@link Api.getPDFData} with a comparer that searches by PDF Code.\r\n     * @param code Which code to search for a PDF with.\r\n     * @category PDFData\r\n     */\r\n    public static getPDFDataByCode(code: string): PDFData | null {\r\n        return Api.getPDFData((item) => {\r\n            return item.data.data.code === code;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper method. Alias for {@link Api.getPDFData} with a comparer that searches by PDF Name.\r\n     * @param name Which name to search for a PDF with.\r\n     * @param caseInsensitive If a case insensitive search should be done.\r\n     * @category PDFData\r\n     */\r\n    public static getPDFDataByName(name: string, caseInsensitive: boolean = true): PDFData | null {\r\n        if (caseInsensitive) {\r\n            return Api.getPDFData((item) => {\r\n                return item.name.toLowerCase() === name.toLowerCase();\r\n            });\r\n        } else {\r\n            return Api.getPDFData((item) => {\r\n                return item.name === name;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds a PDF entity created by the user and constructs a {@link PDFData} object of the resulting PDF's data.\r\n     * @param comparer A comparison function that will be used.\r\n     * @param allowInvisible If true, PDFs hidden from the active user will be returned.\r\n     * @category PDFData\r\n     */\r\n    public static getPDFData(comparer: ItemComparer, allowInvisible: boolean = true): PDFData | null {\r\n        const pdf: Item = game.items.find((item: Item) => {\r\n            return item.type === Settings.PDF_ENTITY_TYPE && (item.visible || allowInvisible) && comparer(item);\r\n        });\r\n\r\n        return getPDFDataFromItem(pdf);\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"OpenPDF Methods\">\r\n\r\n    /**\r\n     * Open the PDF with the provided code to the specified page.\r\n     * Helper for {@link getPDFDataByCode} then {@link openPDF}.\r\n     * @category Open\r\n     */\r\n    public static async openPDFByCode(code: string, page: number = 1): Promise<Viewer> {\r\n        const pdf = this.getPDFDataByCode(code);\r\n\r\n        if (pdf === null) {\r\n            const error = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithCode');\r\n\r\n            if (Settings.NOTIFICATIONS) {\r\n                ui.notifications.error(error);\r\n            }\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return this.openPDF(pdf, page);\r\n    }\r\n\r\n    /**\r\n     * Open the PDF with the provided code to the specified page.\r\n     * Helper for {@link getPDFDataByCode} then {@link openPDF}.\r\n     * @category Open\r\n     */\r\n    public static async openPDFByName(name: string, page: number = 1): Promise<Viewer> {\r\n        const pdf = this.getPDFDataByName(name);\r\n\r\n        if (pdf === null) {\r\n            const message = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithName');\r\n            const error = new Error(message);\r\n\r\n            if (Settings.NOTIFICATIONS) {\r\n                ui.notifications.error(error.message);\r\n            }\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return this.openPDF(pdf, page);\r\n    }\r\n\r\n    /**\r\n     * Open the provided {@link PDFData} to the specified page.\r\n     * @param pdf The PDF to open. See {@link Api.getPDFData}.\r\n     * @param page The page to open the PDF to.\r\n     * @category Open\r\n     */\r\n    public static async openPDF(pdf: PDFData, page: number = 1): Promise<Viewer> {\r\n        let { url, offset, cache } = pdf;\r\n\r\n        if (typeof offset === 'string') {\r\n            offset = parseInt(offset);\r\n        }\r\n\r\n        if (!validateAbsoluteURL(url)) {\r\n            url = getAbsoluteURL(url);\r\n        }\r\n\r\n        const viewer = new Viewer(pdf);\r\n        viewer.render(true);\r\n\r\n        await _handleOpen(viewer, url, page + offset, cache);\r\n\r\n        return viewer;\r\n    }\r\n\r\n    /**\r\n     * Open a URL as a PDF.\r\n     * @param url The URL to open (must be absolute).\r\n     * @param page Which page to open to. Must be >= 1.\r\n     * @param cache If URL based caching should be used.\r\n     * @category Open\r\n     */\r\n    public static async openURL(url: string, page: number = 1, cache: boolean = true): Promise<Viewer> {\r\n        if (isNaN(page) || page <= 0) {\r\n            throw new Error(`Page must be > 0, but ${page} was given.`);\r\n        }\r\n\r\n        if (!validateAbsoluteURL(url)) {\r\n            url = getAbsoluteURL(url);\r\n        }\r\n\r\n        const viewer = new Viewer();\r\n        viewer.render(true);\r\n\r\n        await _handleOpen(viewer, url, page, cache);\r\n\r\n        return viewer;\r\n    }\r\n\r\n    /**\r\n     * Shows the user manual to the active user.\r\n     * @category Utility\r\n     */\r\n    public static async showHelp(): Promise<Viewer> {\r\n        await game.user.setFlag(Settings.EXTERNAL_SYSTEM_NAME, Settings.SETTING_KEY.HELP_SEEN, true);\r\n\r\n        const lang = game.i18n.lang;\r\n        let manualPath = `${window.origin}/systems/${Settings.DIST_PATH}/assets/manual/${lang}/manual.pdf`;\r\n        const manualExists = await fileExists(manualPath);\r\n\r\n        if (!manualExists) {\r\n            manualPath = `${window.origin}/systems/${Settings.DIST_PATH}/assets/manual/en/manual.pdf`;\r\n        }\r\n\r\n        const pdfData: PDFData = {\r\n            name: game.i18n.localize('PDFOUNDRY.MANUAL.Name'),\r\n            code: '',\r\n            offset: 0,\r\n            url: manualPath,\r\n            cache: false,\r\n        };\r\n\r\n        return Api.openPDF(pdfData);\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Setup from './Setup';\r\n\r\nSetup.run();\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { getAbsoluteURL, getPDFDataFromItem } from './Util';\r\nimport { PDFItemSheet } from './app/PDFItemSheet';\r\nimport PreloadEvent from './socket/events/PreloadEvent';\r\nimport { Socket } from './socket/Socket';\r\nimport Settings from './settings/Settings';\r\nimport PDFCache from './cache/PDFCache';\r\nimport I18n from './settings/I18n';\r\nimport Api from './Api';\r\nimport HTMLEnricher from './enricher/HTMLEnricher';\r\nimport TinyMCEPlugin from './enricher/TinyMCEPlugin';\r\n\r\n/**\r\n * A collection of methods used for setting up the API & system state.\r\n * @private\r\n */\r\nexport default class Setup {\r\n    /**\r\n     * Run setup tasks.\r\n     */\r\n    public static run() {\r\n        // Register the PDFoundry APi on the UI\r\n        ui['PDFoundry'] = Api;\r\n\r\n        // Register system & css synchronously\r\n        Setup.registerSystem();\r\n        Setup.injectStyles();\r\n\r\n        // Setup tasks requiring FVTT is loaded\r\n        Hooks.once('ready', Setup.lateRun);\r\n    }\r\n\r\n    /**\r\n     * Late setup tasks happen when the system is loaded\r\n     */\r\n    public static lateRun() {\r\n        // Register the PDF sheet with the class picker\r\n        Setup.setupSheets();\r\n        // Register socket event handlers\r\n        Socket.initialize();\r\n\r\n        // Bind always-run event handlers\r\n        // Enrich Journal & Item Sheet rich text links\r\n        Hooks.on('renderItemSheet', HTMLEnricher.HandleEnrich);\r\n        Hooks.on('renderJournalSheet', HTMLEnricher.HandleEnrich);\r\n        Hooks.on('renderActorSheet', HTMLEnricher.HandleEnrich);\r\n\r\n        // Register TinyMCE drag + drop events\r\n        TinyMCEPlugin.Register();\r\n\r\n        return new Promise(async () => {\r\n            // Initialize the settings\r\n            await Settings.initialize();\r\n            await PDFCache.initialize();\r\n            await I18n.initialize();\r\n\r\n            // PDFoundry is ready\r\n            Setup.userLogin();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Inject the CSS file into the header, so it doesn't have to be referenced in the system.json\r\n     */\r\n    public static injectStyles() {\r\n        const head = $('head');\r\n        const link = `<link href=\"systems/${Settings.DIST_PATH}/bundle.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">`;\r\n        head.append($(link));\r\n    }\r\n\r\n    /**\r\n     * Pulls the system name from the script tags.\r\n     */\r\n    public static registerSystem() {\r\n        const scripts = $('script');\r\n        for (let i = 0; i < scripts.length; i++) {\r\n            const script = scripts.get(i) as HTMLScriptElement;\r\n            const folders = script.src.split('/');\r\n            const distIdx = folders.indexOf(Settings.DIST_NAME);\r\n            if (distIdx === -1) continue;\r\n\r\n            if (folders[distIdx - 1] === 'pdfoundry') break;\r\n\r\n            Settings.EXTERNAL_SYSTEM_NAME = folders[distIdx - 1];\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register the PDF sheet and unregister invalid sheet types from it.\r\n     */\r\n    public static setupSheets() {\r\n        Items.registerSheet(Settings.INTERNAL_MODULE_NAME, PDFItemSheet, {\r\n            types: [Settings.PDF_ENTITY_TYPE],\r\n            makeDefault: true,\r\n        });\r\n\r\n        // Unregister all other item sheets for the PDF entity\r\n        const pdfoundryKey = `${Settings.INTERNAL_MODULE_NAME}.${PDFItemSheet.name}`;\r\n        const sheets = CONFIG.Item.sheetClasses[Settings.PDF_ENTITY_TYPE];\r\n        for (const key of Object.keys(sheets)) {\r\n            const sheet = sheets[key];\r\n            // keep the PDFoundry sheet\r\n            if (sheet.id === pdfoundryKey) {\r\n                continue;\r\n            }\r\n\r\n            // id is MODULE.CLASS_NAME\r\n            const [module] = sheet.id.split('.');\r\n            Items.unregisterSheet(module, sheet.cls, {\r\n                types: [Settings.PDF_ENTITY_TYPE],\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get additional context menu icons for PDF items\r\n     * @param html\r\n     * @param options\r\n     */\r\n    public static getItemContextOptions(html, options: any[]) {\r\n        const getItemFromContext = (html: JQuery<HTMLElement>): Item => {\r\n            const id = html.data('entity-id');\r\n            return game.items.get(id);\r\n        };\r\n\r\n        if (game.user.isGM) {\r\n            options.unshift({\r\n                name: game.i18n.localize('PDFOUNDRY.CONTEXT.PreloadPDF'),\r\n                icon: '<i class=\"fas fa-download fa-fw\"></i>',\r\n                condition: (entityHtml: JQuery<HTMLElement>) => {\r\n                    const item = getItemFromContext(entityHtml);\r\n                    if (item.type !== Settings.PDF_ENTITY_TYPE) {\r\n                        return false;\r\n                    }\r\n\r\n                    const { url } = item.data.data;\r\n                    return url !== '';\r\n                },\r\n                callback: (entityHtml: JQuery<HTMLElement>) => {\r\n                    const item = getItemFromContext(entityHtml);\r\n                    const pdf = getPDFDataFromItem(item);\r\n\r\n                    if (pdf === null) {\r\n                        //TODO: Error handling\r\n                        return;\r\n                    }\r\n\r\n                    const { url } = pdf;\r\n                    const event = new PreloadEvent(null, getAbsoluteURL(url));\r\n                    event.emit();\r\n\r\n                    PDFCache.preload(url);\r\n                },\r\n            });\r\n        }\r\n\r\n        options.unshift({\r\n            name: game.i18n.localize('PDFOUNDRY.CONTEXT.OpenPDF'),\r\n            icon: '<i class=\"far fa-file-pdf\"></i>',\r\n            condition: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = getItemFromContext(entityHtml);\r\n                if (item.type !== Settings.PDF_ENTITY_TYPE) {\r\n                    return false;\r\n                }\r\n\r\n                const { url } = item.data.data;\r\n                return url !== '';\r\n            },\r\n            callback: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = getItemFromContext(entityHtml);\r\n                const pdf = getPDFDataFromItem(item);\r\n\r\n                if (pdf === null) {\r\n                    //TODO: Error handling\r\n                    return;\r\n                }\r\n\r\n                Api.openPDF(pdf, 1);\r\n            },\r\n        });\r\n    }\r\n\r\n    private static userLogin() {\r\n        let viewed;\r\n        try {\r\n            viewed = game.user.getFlag(Settings.EXTERNAL_SYSTEM_NAME, Settings.SETTING_KEY.HELP_SEEN);\r\n        } catch (error) {\r\n            viewed = false;\r\n        } finally {\r\n            if (!viewed) {\r\n                Api.showHelp();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hook handler for default data for a PDF\r\n     */\r\n    public static async preCreateItem(entity, ...args) {\r\n        if (entity.type !== Settings.PDF_ENTITY_TYPE) {\r\n            return;\r\n        }\r\n        entity.img = `systems/${Settings.DIST_PATH}/assets/pdf_icon.svg`;\r\n    }\r\n\r\n    /**\r\n     * Hook handler for rendering the settings tab\r\n     */\r\n    public static onRenderSettings(settings: any, html: JQuery<HTMLElement>, data: any) {\r\n        const icon = '<i class=\"far fa-file-pdf\"></i>';\r\n        const button = $(`<button>${icon} ${game.i18n.localize('PDFOUNDRY.SETTINGS.OpenHelp')}</button>`);\r\n        button.on('click', Api.showHelp);\r\n\r\n        html.find('h2').last().before(button);\r\n    }\r\n}\r\n\r\n// <editor-fold desc=\"Persistent Hooks\">\r\n\r\n// preCreateItem - Setup default values for a new PDFoundry_PDF\r\nHooks.on('preCreateItem', Setup.preCreateItem);\r\n// getItemDirectoryEntryContext - Setup context menu for 'Open PDF' links\r\nHooks.on('getItemDirectoryEntryContext', Setup.getItemContextOptions);\r\n// renderSettings - Inject a 'Open Manual' button into help section\r\nHooks.on('renderSettings', Setup.onRenderSettings);\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFData } from './common/types/PDFData';\r\nimport Settings from './settings/Settings';\r\n\r\n/**\r\n * Helper method. Convert a relative URL to a absolute URL\r\n *  by prepending the window origin to the relative URL.\r\n * @param dataUrl\r\n */\r\nexport function getAbsoluteURL(dataUrl: string): string {\r\n    // Amazon S3 buckets are already absolute\r\n    if (dataUrl.includes('amazonaws.com')) {\r\n        return dataUrl;\r\n    }\r\n    return `${window.origin}/${dataUrl}`;\r\n}\r\n\r\n/**\r\n * Pull relevant data from an item, creating a {@link PDFData}.\r\n * @param item The item to pull data from.\r\n */\r\nexport function getPDFDataFromItem(item: Item): PDFData | null {\r\n    if (item === undefined || item === null) {\r\n        return null;\r\n    }\r\n\r\n    let { code, url, offset, cache } = item.data.data;\r\n    let name = item.name;\r\n\r\n    if (typeof offset === 'string') {\r\n        offset = parseInt(offset);\r\n    }\r\n\r\n    return {\r\n        name,\r\n        code,\r\n        url,\r\n        offset,\r\n        cache,\r\n    };\r\n}\r\n\r\n/**\r\n * Returns true if the URL starts with the origin.\r\n * @param dataUrl A url.\r\n */\r\nexport function validateAbsoluteURL(dataUrl: string): boolean {\r\n    return dataUrl.startsWith(window.origin);\r\n}\r\n\r\n/**\r\n * Return all users ids except the active user\r\n */\r\nexport function getUserIdsExceptMe() {\r\n    return game.users\r\n        .filter((user) => {\r\n            return user.id !== game.userId;\r\n        })\r\n        .map((user) => user.id);\r\n}\r\n\r\n/**\r\n * Gets users with a role number between the provided lower inclusive and upper inclusive bounds.\r\n * @param lower\r\n * @param upper\r\n */\r\nexport function getUserIdsBetweenRoles(lower: number, upper: number) {\r\n    return game.users\r\n        .filter((user) => {\r\n            return user.role >= lower && user.role <= upper;\r\n        })\r\n        .map((user) => user.id);\r\n}\r\n\r\n/**\r\n * Gets users with a role number exactly matching the one provided.\r\n * @param role\r\n */\r\nexport function getUserIdsOfRole(role: number) {\r\n    return game.users\r\n        .filter((user) => {\r\n            return user.role === role;\r\n        })\r\n        .map((user) => user.id);\r\n}\r\n\r\n/**\r\n * Gets users with a role number at least the one provided.\r\n * @param role\r\n */\r\nexport function getUserIdsAtLeastRole(role: number) {\r\n    return game.users\r\n        .filter((user) => {\r\n            return user.role >= role;\r\n        })\r\n        .map((user) => user.id);\r\n}\r\n\r\n/**\r\n * Gets users with a role number at most the one provided.\r\n * @param role\r\n */\r\nexport function getUserIdsAtMostRole(role: number) {\r\n    return game.users\r\n        .filter((user) => {\r\n            return user.role <= role;\r\n        })\r\n        .map((user) => user.id);\r\n}\r\n\r\n/**\r\n * Checks if a remote file exists at the specified path. That is, if the URL is valid. This does not guarantee a\r\n * valid file exists at that location. For example, an HTML file will result in true but not be a valid PDF.\r\n * @param path\r\n */\r\nexport function fileExists(path: string): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        $.ajax(path, {\r\n            type: 'HEAD',\r\n            success: () => {\r\n                resolve(true);\r\n            },\r\n            error: () => {\r\n                resolve(false);\r\n            },\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Returns true if the provided entity is a PDF\r\n * @param entity\r\n */\r\nexport function isPDF(entity: Entity) {\r\n    return entity.data.type === Settings.PDF_ENTITY_TYPE;\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Settings from '../settings/Settings';\r\nimport Api from '../Api';\r\nimport { getAbsoluteURL } from '../Util';\r\n\r\n/**\r\n * Extends the base ItemSheet for linked PDF viewing.\r\n * @private\r\n */\r\nexport class PDFItemSheet extends ItemSheet {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['sheet', 'item'];\r\n        options.width = 650;\r\n        options.height = 'auto';\r\n        options.template = `systems/${Settings.DIST_PATH}/templates/sheet/pdf-sheet.html`;\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Helper method to get a id in the html form\r\n     * html ids are prepended with the id of the item to preserve uniqueness\r\n     *  which is mandatory to allow multiple forms to be open\r\n     * @param html\r\n     * @param id\r\n     */\r\n    private _getByID(html: JQuery<HTMLElement>, id: string): JQuery<HTMLElement> {\r\n        return html.parent().parent().find(`#${this.item._id}-${id}`);\r\n    }\r\n\r\n    protected _getHeaderButtons(): any[] {\r\n        const buttons = super._getHeaderButtons();\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-manual',\r\n            icon: 'fas fa-question-circle',\r\n            label: 'Help',\r\n            onclick: () => Api.showHelp(),\r\n        });\r\n        //TODO: Standardize this to function w/ the Viewer one\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-github',\r\n            icon: 'fas fa-external-link-alt',\r\n            label: 'PDFoundry',\r\n            onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\r\n        });\r\n        return buttons;\r\n    }\r\n\r\n    protected activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html);\r\n\r\n        const urlInput = this._getByID(html, 'data\\\\.url');\r\n        const offsetInput = this._getByID(html, 'data\\\\.offset');\r\n\r\n        // Block enter from displaying the PDF\r\n        html.find('input').on('keypress', function (event) {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        // Test button\r\n        this._getByID(html, 'pdf-test').on('click', function (event) {\r\n            event.preventDefault();\r\n\r\n            let urlValue = urlInput.val();\r\n            let offsetValue = offsetInput.val();\r\n\r\n            if (urlValue === null || urlValue === undefined) return;\r\n            if (offsetValue === null || offsetValue === undefined) return;\r\n\r\n            urlValue = urlValue.toString();\r\n\r\n            urlValue = getAbsoluteURL(urlValue);\r\n\r\n            if (offsetValue.toString().trim() === '') {\r\n                offsetValue = 0;\r\n            }\r\n            offsetValue = parseInt(offsetValue as string);\r\n\r\n            Api.openURL(urlValue, 5 + offsetValue, false);\r\n        });\r\n\r\n        // Browse button\r\n        this._getByID(html, 'pdf-browse').on('click', async function (event) {\r\n            event.preventDefault();\r\n\r\n            const fp = new FilePicker({});\r\n            // @ts-ignore TODO: foundry-pc-types\r\n            fp.extensions = ['.pdf'];\r\n            fp.field = urlInput[0];\r\n\r\n            let urlValue = urlInput.val();\r\n            if (urlValue !== undefined) {\r\n                await fp.browse(urlValue.toString().trim());\r\n            }\r\n\r\n            fp.render(true);\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\n/**\r\n * Callback type for player selection\r\n * @private\r\n */\r\nexport type PDFPlayerSelectCallback = (ids: []) => void;\r\n\r\n/**\r\n * An application that allows selection of players.\r\n * @private\r\n */\r\nexport default class PlayerSelect extends Application {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['sheet', 'item'];\r\n        options.template = `systems/${Settings.DIST_PATH}/templates/app/pdf-player-select.html`;\r\n        options.width = 'auto';\r\n        options.height = 'auto';\r\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.SelectPlayers');\r\n        return options;\r\n    }\r\n\r\n    private readonly _ids;\r\n    private readonly _callback;\r\n\r\n    constructor(ids: string[], cb: PDFPlayerSelectCallback, options?: ApplicationOptions) {\r\n        super(options);\r\n\r\n        this._ids = ids;\r\n        this._callback = cb;\r\n    }\r\n\r\n    getData(options?: any): any | Promise<any> {\r\n        const data = super.getData(options);\r\n\r\n        const users: any[] = [];\r\n        for (const id of this._ids) {\r\n            users.push({\r\n                name: game.users.get(id).name,\r\n                id,\r\n            });\r\n        }\r\n\r\n        users.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n        data['users'] = users;\r\n        return data;\r\n    }\r\n\r\n    protected activateListeners(html: JQuery<HTMLElement> | HTMLElement): void {\r\n        super.activateListeners(html);\r\n\r\n        const button = $(html).find('#confirm');\r\n        button.on('click', () => {\r\n            this._callback(this.collectIds());\r\n            this.close();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Collect selected ids from the html\r\n     */\r\n    private collectIds(): string[] {\r\n        const ids: string[] = [];\r\n        const checkboxes = $(this.element).find('input[type=checkbox]');\r\n        for (let i = 0; i < checkboxes.length; i++) {\r\n            const checkbox = $(checkboxes[i]);\r\n            if (checkbox.prop('checked')) {\r\n                ids.push(checkbox.prop('id'));\r\n            }\r\n        }\r\n        return ids;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * An error that occurs during cache operations\r\n * @private\r\n */\r\nexport class CacheError extends Error {\r\n    constructor(index: string, store: string, message?: string) {\r\n        super(`Error in ${index}>${store}: ${message}`);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { CacheError } from './CacheError';\r\n\r\n/**\r\n * Class that deals with getting/setting from an indexed db\r\n * Mostly exists to separate logic for the PDFCache from logic\r\n * dealing with the database\r\n * @private\r\n */\r\nexport default class CacheHelper {\r\n    private _version: number;\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _storeNames: string[];\r\n\r\n    private _db: IDBDatabase;\r\n\r\n    public static async createAndOpen(indexName: string, storeNames: string[], version: number) {\r\n        const helper = new CacheHelper(indexName, storeNames, version);\r\n        await helper.open();\r\n        return helper;\r\n    }\r\n\r\n    public get ready() {\r\n        return this._db !== undefined;\r\n    }\r\n\r\n    public constructor(indexName: string, storeNames: string[], version: number) {\r\n        this._indexName = `${indexName}`;\r\n        this._storeNames = storeNames;\r\n        this._version = version;\r\n    }\r\n\r\n    private newTransaction(storeName: string) {\r\n        const transaction = this._db.transaction(storeName, 'readwrite');\r\n        const store = transaction.objectStore(storeName);\r\n        return { transaction, store };\r\n    }\r\n\r\n    public open(): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function (resolve, reject) {\r\n            const request = indexedDB.open(that._indexName, that._version);\r\n            request.onsuccess = function (event) {\r\n                that._db = this.result;\r\n                resolve();\r\n            };\r\n            request.onupgradeneeded = function (event) {\r\n                that._db = this.result;\r\n                for (let i = 0; i < that._storeNames.length; i++) {\r\n                    try {\r\n                        // Create object store if it doesn't exist\r\n                        that._db.createObjectStore(that._storeNames[i], {});\r\n                    } catch (error) {\r\n                        // Otherwise pass\r\n                    }\r\n                }\r\n                resolve();\r\n            };\r\n            request.onerror = function (event) {\r\n                // @ts-ignore\r\n                reject(event.target.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    public set(key: IDBValidKey, value: any, storeName: string, force: boolean = false): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (!this._db) {\r\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\r\n            } else {\r\n                const that = this;\r\n                let { transaction, store } = this.newTransaction(storeName);\r\n\r\n                // Propagate errors upwards, otherwise they fail silently\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                const keyRequest = store.getKey(key);\r\n                keyRequest.onsuccess = function (event) {\r\n                    // key already exists in the store\r\n                    if (keyRequest.result) {\r\n                        // should we force the new value by deleting the old?\r\n                        if (force) {\r\n                            that.del(key, storeName).then(() => {\r\n                                ({ transaction, store } = that.newTransaction(storeName));\r\n                                store.add(value, key);\r\n                                resolve();\r\n                            });\r\n                        } else {\r\n                            throw new CacheError(that._indexName, storeName, `Key ${key} already exists.`);\r\n                        }\r\n                    } else {\r\n                        store.add(value, key);\r\n                        resolve();\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public get(key: IDBValidKey, storeName: string): Promise<any> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (!this._db) {\r\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\r\n            } else {\r\n                let { transaction, store } = this.newTransaction(storeName);\r\n\r\n                // Propagate errors upwards, otherwise they fail silently\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                const getRequest = store.get(key);\r\n                getRequest.onsuccess = function (event) {\r\n                    resolve(this.result);\r\n                };\r\n\r\n                getRequest.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public del(key: IDBValidKey, storeName: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const { transaction, store } = this.newTransaction(storeName);\r\n\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n                transaction.oncomplete = function (event) {\r\n                    resolve();\r\n                };\r\n\r\n                store.delete(key);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public keys(storeName: string): Promise<IDBValidKey[]> {\r\n        return new Promise<IDBValidKey[]>((resolve, reject) => {\r\n            try {\r\n                const { transaction, store } = this.newTransaction(storeName);\r\n                const keysRequest = store.getAllKeys();\r\n\r\n                keysRequest.onsuccess = function () {\r\n                    resolve(keysRequest.result);\r\n                };\r\n                keysRequest.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                return;\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public clr(storeName: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const { store } = this.newTransaction(storeName);\r\n                const keys = store.getAllKeys();\r\n                keys.onsuccess = (result) => {\r\n                    const promises: Promise<void>[] = [];\r\n                    for (const key of keys.result) {\r\n                        promises.push(this.del(key, storeName));\r\n                    }\r\n                    Promise.all(promises).then(() => {\r\n                        resolve();\r\n                    });\r\n                };\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Settings from '../settings/Settings';\r\nimport CacheHelper from './CacheHelper';\r\n\r\n/**\r\n * Meta information about a cache entry\r\n * @private\r\n */\r\ntype CacheData = {\r\n    /**\r\n     * The size in bytes this cache entry takes up.\r\n     */\r\n    size: number;\r\n    /**\r\n     * The date the cache was last accessed, represented by a ISO string.\r\n     */\r\n    dateAccessed: string;\r\n};\r\n\r\n/**\r\n * Handles caching for PDFs\r\n * @private\r\n */\r\nexport default class PDFCache {\r\n    // <editor-fold desc=\"Static Properties\">\r\n    /**\r\n     * Max size of the cache for the active user, defaults to 256 MB.\r\n     */\r\n    public static get MAX_BYTES() {\r\n        return game.settings.get(Settings.EXTERNAL_SYSTEM_NAME, 'CacheSize') * 2 ** 20;\r\n    }\r\n\r\n    private static readonly IDB_NAME: string = 'PDFoundry';\r\n    private static readonly IDB_VERSION: number = 1;\r\n\r\n    private static readonly CACHE: string = `Cache`;\r\n    private static readonly META: string = `Meta`;\r\n\r\n    private static _cacheHelper: CacheHelper;\r\n    // </editor-fold>\r\n\r\n    public static async initialize() {\r\n        PDFCache._cacheHelper = await CacheHelper.createAndOpen(PDFCache.IDB_NAME, [PDFCache.CACHE, PDFCache.META], PDFCache.IDB_VERSION);\r\n    }\r\n\r\n    /**\r\n     * Get meta information about a provided key (url).\r\n     * @param key\r\n     */\r\n    public static async getMeta(key: string): Promise<CacheData | null> {\r\n        try {\r\n            return await PDFCache._cacheHelper.get(key, PDFCache.META);\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set meta information about a provided key (url). See {@link CacheData}.\r\n     * @param key\r\n     * @param meta\r\n     */\r\n    public static async setMeta(key: string, meta: CacheData): Promise<void> {\r\n        await PDFCache._cacheHelper.set(key, meta, PDFCache.META, true);\r\n    }\r\n\r\n    /**\r\n     * Get the byte array representing the key (url) from the user's cache.\r\n     * @param key\r\n     */\r\n    public static async getCache(key: string): Promise<Uint8Array | null> {\r\n        try {\r\n            const bytes = await PDFCache._cacheHelper.get(key, PDFCache.CACHE);\r\n            const meta: CacheData = {\r\n                dateAccessed: new Date().toISOString(),\r\n                size: bytes.length,\r\n            };\r\n            await PDFCache.setMeta(key, meta);\r\n\r\n            return bytes;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the value of the cache for the specific key (url) to the provided byte array.\r\n     * @param key\r\n     * @param bytes\r\n     */\r\n    public static async setCache(key: string, bytes: Uint8Array) {\r\n        const meta: CacheData = {\r\n            dateAccessed: new Date().toISOString(),\r\n            size: bytes.length,\r\n        };\r\n\r\n        await PDFCache._cacheHelper.set(key, bytes, PDFCache.CACHE, true);\r\n        await PDFCache.setMeta(key, meta);\r\n        await this.prune();\r\n    }\r\n\r\n    /**\r\n     * Preload the PDF at the specified key (url), caching it immediately.\r\n     * @param key\r\n     */\r\n    public static preload(key: string): Promise<void> {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const cachedBytes = await PDFCache.getCache(key);\r\n            if (cachedBytes !== null && cachedBytes.byteLength > 0) {\r\n                resolve();\r\n                return;\r\n            }\r\n\r\n            const response = await fetch(key);\r\n            if (response.ok) {\r\n                const fetchedBytes = new Uint8Array(await response.arrayBuffer());\r\n                if (fetchedBytes.byteLength > 0) {\r\n                    await PDFCache.setCache(key, fetchedBytes);\r\n                    resolve();\r\n                    return;\r\n                } else {\r\n                    reject('Fetch failed.');\r\n                }\r\n            } else {\r\n                reject('Fetch failed.');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prune the active user's cache until it is below the user's cache size limit.\r\n     */\r\n    public static async prune() {\r\n        const keys = await this._cacheHelper.keys(PDFCache.META);\r\n\r\n        let totalBytes = 0;\r\n        let metas: any[] = [];\r\n        for (const key of keys) {\r\n            const meta = await this._cacheHelper.get(key, PDFCache.META);\r\n            meta.dateAccessed = Date.parse(meta.dateAccessed);\r\n            meta.size = parseInt(meta.size);\r\n\r\n            totalBytes += meta.size;\r\n\r\n            metas.push({\r\n                key,\r\n                meta,\r\n            });\r\n        }\r\n\r\n        metas = metas.sort((a, b) => {\r\n            return a.meta.dateAccessed - b.meta.dateAccessed;\r\n        });\r\n\r\n        for (let i = 0; i < metas.length; i++) {\r\n            if (totalBytes < PDFCache.MAX_BYTES) {\r\n                break;\r\n            }\r\n\r\n            const next = metas[i];\r\n\r\n            await this._cacheHelper.del(next.key, PDFCache.META);\r\n            await this._cacheHelper.del(next.key, PDFCache.CACHE);\r\n\r\n            totalBytes -= next.meta.size;\r\n        }\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Api from '../../Api';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class EventStore<TKeys extends string = string> {\r\n    private readonly _map: Map<string, Function[]>;\r\n\r\n    public constructor() {\r\n        this._map = new Map<string, Function[]>();\r\n    }\r\n\r\n    /**\r\n     * Turn on an event callback for the specified event.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public on(eventName: TKeys, callback: Function) {\r\n        if (!this._map.has(eventName)) {\r\n            this._map.set(eventName, []);\r\n        }\r\n\r\n        const callbacks = this._map.get(eventName) as Function[];\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            if (callbacks[i] === callback) return;\r\n        }\r\n        callbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * Like {@see on} but only fires once.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public once(eventName: TKeys, callback: Function) {\r\n        const that = this;\r\n        const wrapper = function (...args) {\r\n            callback(args);\r\n            that.off(eventName, wrapper);\r\n        };\r\n        that.on(eventName, wrapper);\r\n    }\r\n\r\n    /**\r\n     * Turn off an event callback for the specified event.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public off(eventName: TKeys, callback: Function) {\r\n        if (!this._map.has(eventName)) {\r\n            this._map.set(eventName, []);\r\n        }\r\n\r\n        const callbacks = this._map.get(eventName) as Function[];\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            if (callbacks[i] === callback) {\r\n                callbacks.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fire an event and forward the args to all handlers\r\n     * @param eventName\r\n     * @param args\r\n     */\r\n    public fire(eventName: TKeys, ...args) {\r\n        if (Api.DEBUG.EVENTS) {\r\n            console.debug(`PDFoundry::${eventName}`);\r\n            console.debug(args);\r\n        }\r\n\r\n        if (!this._map.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        const callbacks = this._map.get(eventName) as Function[];\r\n        for (const callback of callbacks) {\r\n            callback(...args);\r\n        }\r\n    }\r\n}\r\n","import { PDFItemSheet } from '../app/PDFItemSheet';\r\nimport Settings from '../settings/Settings';\r\nimport Api from '../Api';\r\n\r\n/**\r\n * @private\r\n * Enriches TinyMCE editor content\r\n */\r\nexport default class HTMLEnricher {\r\n    public static HandleEnrich(app: Application, html: JQuery, data: any) {\r\n        if (app instanceof PDFItemSheet) return;\r\n\r\n        HTMLEnricher.EnrichHTML(html);\r\n        HTMLEnricher.BindClicks(html);\r\n    }\r\n\r\n    private static EnrichHTML(html: JQuery) {\r\n        // Enrich HTML\r\n        for (const element of html.find('div.editor-content > *')) {\r\n            try {\r\n                // We replace one at a time until done\r\n                while (element.innerText.includes('@PDF')) {\r\n                    element.innerHTML = new HTMLEnricher($(element), element.innerHTML).enrich();\r\n                }\r\n            } catch (error) {\r\n                // Errors get propagated from instance for proper error modeling\r\n                if (Settings.NOTIFICATIONS) {\r\n                    ui.notifications.error(error.message);\r\n                } else {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BindClicks(html: JQuery) {\r\n        html.find('a.pdfoundry-link').on('click', (event) => {\r\n            event.preventDefault();\r\n\r\n            // This will always be an anchor\r\n            const target = $(event.currentTarget as HTMLAnchorElement);\r\n            const ref = target.data('ref');\r\n            const page = target.data('page');\r\n\r\n            // ref can match name or code\r\n            let pdfData = Api.getPDFData((item) => {\r\n                return item.name === ref || item.data.data.code === ref;\r\n            });\r\n\r\n            if (!pdfData) {\r\n                ui.notifications.error(`Unable to find a PDF with a name or code matching ${ref}.`);\r\n                return;\r\n            }\r\n            Api.openPDF(pdfData, page);\r\n        });\r\n    }\r\n\r\n    private readonly _sPos: number;\r\n    private readonly _ePos: number;\r\n    private readonly _text: string;\r\n    private readonly _element: JQuery;\r\n\r\n    constructor(p: JQuery, text: string) {\r\n        this._element = p;\r\n        this._text = text;\r\n\r\n        this._sPos = this._text.indexOf('@');\r\n        this._ePos = this._text.indexOf('}', this._sPos + 1);\r\n    }\r\n\r\n    public enrich(): string {\r\n        const enrichMe = this._text.slice(this._sPos, this._ePos + 1);\r\n\r\n        const lBracket = enrichMe.indexOf('[');\r\n        const rBracket = enrichMe.indexOf(']');\r\n        const lCurly = enrichMe.indexOf('{');\r\n        const rCurly = enrichMe.indexOf('}');\r\n\r\n        // Required character is missing\r\n        if (lBracket === -1 || rBracket === -1 || lCurly === -1 || rCurly === -1) {\r\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\r\n        }\r\n        // Order is not correct\r\n        if (rCurly < lCurly || lCurly < rBracket || rBracket < lBracket) {\r\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\r\n        }\r\n\r\n        const options = enrichMe.slice(lBracket + 1, rBracket);\r\n        // Multiple dividers are not supported\r\n        if (options.indexOf('|') !== options.lastIndexOf('|')) {\r\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\r\n        }\r\n\r\n        let linkText = enrichMe.slice(lCurly + 1, rCurly);\r\n        // Empty names are not supported\r\n        if (linkText === undefined || linkText === '') {\r\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.EmptyLinkText'));\r\n        }\r\n\r\n        let pageNumber = 1;\r\n        const [nameOrCode, queryString] = options.split('|');\r\n\r\n        // Getting the PDF without invisible PDFs to check permissions\r\n        let pdfData = Api.getPDFData((item) => {\r\n            return item.name === nameOrCode || item.data.data.code === nameOrCode;\r\n        }, false);\r\n\r\n        if (pdfData) {\r\n            // Case 1 - User has permissions to see the PDF\r\n            if (queryString !== undefined && queryString !== '') {\r\n                const [_, pageString] = queryString.split('=');\r\n                try {\r\n                    pageNumber = parseInt(pageString);\r\n                } catch (error) {\r\n                    // Ignore page number\r\n                }\r\n            }\r\n\r\n            if (pageNumber <= 0) {\r\n                throw new Error('PDFOUNDRY.ERROR.PageMustBePositive');\r\n            }\r\n\r\n            const i18nOpen = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitleOpen');\r\n            const i18nPage = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitlePage');\r\n            const linkTitle = `${i18nOpen} ${nameOrCode} ${i18nPage} ${pageNumber}`;\r\n            const result = `<a class=\"pdfoundry-link\" title=\"${linkTitle}\" data-ref=\"${nameOrCode}\" data-page=\"${pageNumber}\">${linkText}</a>`;\r\n\r\n            return this._text.slice(0, this._sPos) + result + this._text.slice(this._ePos + 1);\r\n        } else {\r\n            // Case 2 - User does not have permissions to see the PDF\r\n            return this._text.slice(0, this._sPos) + linkText + this._text.slice(this._ePos + 1);\r\n        }\r\n    }\r\n}\r\n","import { getPDFDataFromItem, isPDF } from '../Util';\r\n\r\n/**\r\n * @private\r\n * A plugin for TinyMCE that handles Drag + Drop\r\n */\r\nexport default class TinyMCEPlugin {\r\n    private static pluginName = 'PDFoundry_HTMLEnrich_Drop';\r\n\r\n    /**\r\n     * Register plugin with Foundry + TinyMCE\r\n     */\r\n    public static Register() {\r\n        // @ts-ignore\r\n        tinyMCE.PluginManager.add(TinyMCEPlugin.pluginName, function (editor) {\r\n            editor.on('BeforeSetContent', (event) => TinyMCEPlugin.Handle(event));\r\n        });\r\n        CONFIG.TinyMCE.plugins = `${TinyMCEPlugin.pluginName} ${CONFIG.TinyMCE.plugins}`;\r\n    }\r\n\r\n    private static Handle(event: any) {\r\n        if (event.initial) return;\r\n        if (!event.selection || event.set !== undefined) {\r\n            return;\r\n        }\r\n\r\n        const initialContent = event.content;\r\n\r\n        const lBracket = initialContent.indexOf('[');\r\n        const rBracket = initialContent.indexOf(']');\r\n        const entityId = initialContent.slice(lBracket + 1, rBracket);\r\n\r\n        const entity = game.items.get(entityId);\r\n        if (entity === null || !isPDF(entity)) {\r\n            return;\r\n        }\r\n\r\n        const pdfData = getPDFDataFromItem(entity);\r\n        if (!pdfData) {\r\n            return;\r\n        }\r\n\r\n        const codeOrName = pdfData.code ? pdfData.code : pdfData.name;\r\n\r\n        event.content = `@PDF[${codeOrName}|page=1]{${pdfData.name}}`;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Settings from './Settings';\r\n\r\n/**\r\n * Localization helper\r\n * @private\r\n */\r\nexport default class I18n {\r\n    /**\r\n     * Load the localization file for the user's language.\r\n     */\r\n    public static async initialize() {\r\n        const lang = game.i18n.lang;\r\n        // user's language path\r\n        const u_path = `systems/${Settings.DIST_PATH}/locale/${lang}/config.json`;\r\n        // english fallback path\r\n        const f_path = `systems/${Settings.DIST_PATH}/locale/en/config.json`;\r\n\r\n        let json;\r\n        try {\r\n            json = await $.getJSON(u_path);\r\n        } catch (error) {\r\n            // if no translation exits for the users locale the fallback\r\n            json = await $.getJSON(f_path);\r\n        }\r\n\r\n        for (const key of Object.keys(json)) {\r\n            game.i18n.translations[key] = json[key];\r\n        }\r\n\r\n        // setup the fallback as english so partial translations do not display keys\r\n        let fb_json = await $.getJSON(f_path);\r\n        for (const key of Object.keys(fb_json)) {\r\n            // @ts-ignore\r\n            game.i18n._fallback[key] = json[key];\r\n        }\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Internal settings and helper methods for PDFoundry.\r\n * @private\r\n */\r\nexport default class Settings {\r\n    /**\r\n     * Are feedback notifications enabled? Disable if you wish\r\n     *  to handle them yourself.\r\n     */\r\n    public static NOTIFICATIONS: boolean = true;\r\n\r\n    public static EXTERNAL_SYSTEM_NAME: string = '../modules/pdfoundry';\r\n    public static INTERNAL_MODULE_NAME: string = 'pdfoundry';\r\n\r\n    public static DIST_NAME = 'pdfoundry-dist';\r\n\r\n    public static get DIST_PATH() {\r\n        return `${Settings.EXTERNAL_SYSTEM_NAME}/${Settings.DIST_NAME}`;\r\n    }\r\n\r\n    public static PDF_ENTITY_TYPE: string = 'PDFoundry_PDF';\r\n\r\n    public static SETTING_KEY = {\r\n        EXISTING_VIEWER: 'ShowInExistingViewer',\r\n        CACHE_SIZE: 'CacheSize',\r\n        HELP_SEEN: 'PDFoundry_HelpSeen',\r\n    };\r\n\r\n    public static get SOCKET_NAME() {\r\n        return `system.${Settings.EXTERNAL_SYSTEM_NAME}`;\r\n    }\r\n\r\n    public static initialize() {\r\n        Settings.register(Settings.SETTING_KEY.CACHE_SIZE, {\r\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeName'),\r\n            scope: 'user',\r\n            type: Number,\r\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeHint'),\r\n            default: 256,\r\n            config: true,\r\n            onChange: async (mb) => {\r\n                mb = Math.round(mb);\r\n                mb = Math.max(mb, 64);\r\n                mb = Math.min(mb, 1024);\r\n                await Settings.set(Settings.SETTING_KEY.CACHE_SIZE, mb);\r\n            },\r\n        });\r\n\r\n        Settings.register(Settings.SETTING_KEY.EXISTING_VIEWER, {\r\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerName'),\r\n            scope: 'user',\r\n            type: Boolean,\r\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerHint'),\r\n            default: true,\r\n            config: true,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Wrapper around game.settings.register. Ensures scope is correct.\r\n     * @param key\r\n     * @param data\r\n     */\r\n    public static register(key: string, data: any) {\r\n        game.settings.register(Settings.EXTERNAL_SYSTEM_NAME, key, data);\r\n    }\r\n\r\n    /**\r\n     * Wrapper around game.settings.get. Ensures scope is correct.\r\n     * @param key\r\n     */\r\n    public static get(key: string) {\r\n        return game.settings.get(Settings.EXTERNAL_SYSTEM_NAME, key);\r\n    }\r\n\r\n    /**\r\n     * Wrapper around game.settings.set. Ensures scope is correct.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    public static async set(key: string, value: any) {\r\n        return game.settings.set(Settings.EXTERNAL_SYSTEM_NAME, key, value);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport PreloadEvent from './events/PreloadEvent';\r\nimport Viewer from '../viewer/Viewer';\r\nimport Api from '../Api';\r\nimport Settings from '../settings/Settings';\r\nimport SetViewEvent from './events/SetViewEvent';\r\nimport PDFCache from '../cache/PDFCache';\r\n\r\n/**\r\n * @private\r\n */\r\nexport class Socket {\r\n    public static initialize() {\r\n        // @ts-ignore\r\n        game.socket.on(Settings.SOCKET_NAME, (event) => {\r\n            const { userIds, type, payload } = event;\r\n            // null = all users, otherwise check if this event effects us\r\n            if (userIds !== null && !userIds.includes(game.userId)) {\r\n                return;\r\n            }\r\n\r\n            if (type === SetViewEvent.EVENT_TYPE) {\r\n                Socket.handleSetView(payload);\r\n                return;\r\n            } else if (type === PreloadEvent.EVENT_TYPE) {\r\n                Socket.handlePreloadPDF(payload);\r\n                return;\r\n            } else {\r\n                if (type.includes('PDFOUNDRY')) {\r\n                    console.error(`Event of type ${type} has no handler.`);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static handleSetView(data: any) {\r\n        if (Settings.get(Settings.SETTING_KEY.EXISTING_VIEWER)) {\r\n            function appIsViewer(app: Application): app is Viewer {\r\n                return app['pdfData'] !== undefined;\r\n            }\r\n\r\n            for (const app of Object.values(ui.windows)) {\r\n                if (!appIsViewer(app)) {\r\n                    continue;\r\n                }\r\n\r\n                const pdfData = app.pdfData;\r\n                if (data.pdfData.url === pdfData.url) {\r\n                    app.page = data.page;\r\n                    return;\r\n                }\r\n            }\r\n            // App not found, fall through.\r\n        }\r\n        Api.openPDF(data.pdfData, data.page);\r\n    }\r\n\r\n    public static handlePreloadPDF(data: any) {\r\n        PDFCache.preload(data.url);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SocketEvent from './SocketEvent';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class PreloadEvent extends SocketEvent {\r\n    public static get EVENT_TYPE() {\r\n        return `${super.EVENT_TYPE}/PRELOAD_PDF`;\r\n    }\r\n\r\n    get type() {\r\n        return PreloadEvent.EVENT_TYPE;\r\n    }\r\n\r\n    public url: string;\r\n\r\n    constructor(userIds: string[] | null, url: string) {\r\n        super(userIds);\r\n\r\n        this.url = url;\r\n    }\r\n\r\n    protected getPayload(): any {\r\n        const payload = super.getPayload();\r\n        payload.url = this.url;\r\n        return payload;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SocketEvent from './SocketEvent';\r\nimport { PDFData } from '../../common/types/PDFData';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class SetViewEvent extends SocketEvent {\r\n    public static get EVENT_TYPE() {\r\n        return `${super.EVENT_TYPE}/SET_VIEW`;\r\n    }\r\n\r\n    get type() {\r\n        return SetViewEvent.EVENT_TYPE;\r\n    }\r\n\r\n    public page: number;\r\n    public pdfData: PDFData;\r\n\r\n    constructor(userIds: string[] | null, pdfData: PDFData, page: number) {\r\n        super(userIds);\r\n\r\n        this.pdfData = pdfData;\r\n        this.page = page;\r\n    }\r\n\r\n    protected getPayload() {\r\n        const payload = super.getPayload();\r\n        payload.pdfData = this.pdfData;\r\n        payload.page = this.page;\r\n        return payload;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Settings from '../../settings/Settings';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default abstract class SocketEvent {\r\n    /**\r\n     * The type of this event.\r\n     */\r\n    public static get EVENT_TYPE() {\r\n        return 'PDFOUNDRY';\r\n    }\r\n\r\n    /**\r\n     * The type of this event.\r\n     */\r\n    public abstract get type();\r\n\r\n    /**\r\n     * The user ids that should handle this event.\r\n     */\r\n    protected userIds: string[] | null;\r\n\r\n    protected constructor(userIds: string[] | null) {\r\n        this.userIds = userIds;\r\n    }\r\n\r\n    /**\r\n     * Get any data that will be sent with the event.\r\n     */\r\n    protected getPayload(): any {\r\n        return {};\r\n    }\r\n\r\n    public emit() {\r\n        // @ts-ignore\r\n        game.socket.emit(Settings.SOCKET_NAME, {\r\n            type: this.type,\r\n            userIds: this.userIds,\r\n            payload: this.getPayload(),\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport PlayerSelect from '../app/PlayerSelect';\r\nimport { getUserIdsExceptMe } from '../Util';\r\nimport { PDFViewerEvent } from '../common/types/PDFHooks';\r\nimport { PDFData } from '../common/types/PDFData';\r\nimport { PDFjsViewer } from '../common/types/PDFjsViewer';\r\nimport Settings from '../settings/Settings';\r\nimport { PDFjsEventBus } from '../common/types/PDFjsEventBus';\r\nimport SetViewEvent from '../socket/events/SetViewEvent';\r\nimport EventStore from '../common/helpers/events';\r\n\r\n/**\r\n * The PDFoundry Viewer class provides the core logic opening PDFs and binding their events.\r\n * You cannot create a new instance of this class, you must do so with the API.\r\n *\r\n * See {@link Api.openPDF}, {@link Api.openPDFByCode}, {@link Api.openPDFByName}, {@link Api.openURL} which all return a\r\n * promise which resolve with an instance of this class.\r\n */\r\nexport default class Viewer extends Application {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['app', 'window-app', 'pdfoundry-viewer'];\r\n        options.template = `systems/${Settings.EXTERNAL_SYSTEM_NAME}/pdfoundry-dist/templates/app/pdf-viewer.html`;\r\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\r\n        options.width = 8.5 * 100 + 64;\r\n        options.height = 11 * 100 + 64;\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    protected _frame: HTMLIFrameElement;\r\n    protected _viewer: PDFjsViewer;\r\n    protected _eventBus: PDFjsEventBus;\r\n    protected _pdfData: PDFData;\r\n    protected _eventStore: EventStore<PDFViewerEvent>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(pdfData?: PDFData, options?: ApplicationOptions) {\r\n        super(options);\r\n\r\n        if (pdfData === undefined) {\r\n            pdfData = {\r\n                name: game.i18n.localize('PDFOUNDRY.VIEWER.Title'),\r\n                code: '',\r\n                offset: 0,\r\n                url: '',\r\n                cache: false,\r\n            };\r\n        }\r\n\r\n        this._pdfData = pdfData;\r\n        this._eventStore = new EventStore<PDFViewerEvent>();\r\n    }\r\n\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    /**\r\n     * Returns a copy of the PDFData this viewer is using.\r\n     * Changes to this data will not reflect in the viewer.\r\n     */\r\n    public get pdfData() {\r\n        return duplicate(this._pdfData);\r\n    }\r\n\r\n    /**\r\n     * Get the currently viewed page.\r\n     */\r\n    public get page() {\r\n        return this._viewer.page;\r\n    }\r\n\r\n    /**\r\n     * Set the currently viewed page.\r\n     * @param value\r\n     */\r\n    public set page(value: number) {\r\n        this._viewer.page = value;\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"Foundry Overrides\">\r\n\r\n    public get title(): string {\r\n        let title = this._pdfData.name;\r\n        if (this._pdfData.code !== '') {\r\n            title = `${title} (${this._pdfData.code})`;\r\n        }\r\n        return title;\r\n    }\r\n\r\n    protected _getHeaderButtons(): any[] {\r\n        const buttons = super._getHeaderButtons();\r\n        //TODO: Standardize this to function w/ the Item sheet one\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-github',\r\n            icon: 'fas fa-external-link-alt',\r\n            label: 'PDFoundry',\r\n            onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\r\n        });\r\n\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-show-players',\r\n            icon: 'fas fa-eye',\r\n            label: game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersText'),\r\n            onclick: (event) => this.showTo(event),\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    public getData(options?: any): any | Promise<any> {\r\n        const data = super.getData(options);\r\n        data.systemName = Settings.EXTERNAL_SYSTEM_NAME;\r\n        return data;\r\n    }\r\n\r\n    protected async activateListeners(html: JQuery): Promise<void> {\r\n        this._eventStore.fire('viewerOpening', this);\r\n        super.activateListeners(html);\r\n\r\n        this._frame = html.parent().find('iframe.pdfViewer').get(0) as HTMLIFrameElement;\r\n        this.getViewer().then(async (viewer) => {\r\n            this._viewer = viewer;\r\n\r\n            this._eventStore.fire('viewerOpened', this);\r\n\r\n            this.getEventBus().then((eventBus) => {\r\n                this._eventBus = eventBus;\r\n                this._eventBus.on('pagerendered', this.onPageRendered.bind(this));\r\n                this._eventBus.on('pagechanging', this.onPageChanging.bind(this));\r\n                this._eventBus.on('updateviewarea', this.onViewAreaUpdated.bind(this));\r\n                this._eventBus.on('scalechanging', this.onScaleChanging.bind(this));\r\n\r\n                // const listeners = eventBus._listeners;\r\n                // for (const eventName of Object.keys(listeners)) {\r\n                //     eventBus.on(eventName, (...args) => {\r\n                //         Viewer.logEvent(eventName, args);\r\n                //     });\r\n                // }\r\n\r\n                this._eventStore.fire('viewerReady', this);\r\n            });\r\n        });\r\n\r\n        // _getHeaderButtons does not permit titles...\r\n        $(html).parents().parents().find('.pdf-sheet-show-players').prop('title', game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersTitle'));\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"Events\">\r\n\r\n    protected onPageChanging(event) {\r\n        this._eventStore.fire('pageChanging', this, {\r\n            pageLabel: event.pageLabel,\r\n            pageNumber: event.pageNumber,\r\n        });\r\n    }\r\n\r\n    protected onPageRendered(event) {\r\n        this._eventStore.fire('pageRendered', this, {\r\n            pageNumber: event.pageNumber,\r\n            pageLabel: event.source.pageLabel,\r\n            width: event.source.width,\r\n            height: event.source.height,\r\n            rotation: event.source.rotation,\r\n            scale: event.source.scale,\r\n            canvas: event.source.canvas,\r\n            div: event.source.div,\r\n            error: event.source.error,\r\n        });\r\n    }\r\n\r\n    protected onViewAreaUpdated(event) {\r\n        this._eventStore.fire('viewAreaUpdated', this, {\r\n            top: event.location.top,\r\n            left: event.location.left,\r\n            pageNumber: event.location.pageNumber,\r\n            rotation: event.location.rotation,\r\n            scale: event.location.scale,\r\n        });\r\n    }\r\n\r\n    protected onScaleChanging(event) {\r\n        this._eventStore.fire('scaleChanging', this, {\r\n            presetValue: event.presetValue,\r\n            scale: event.scale,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to occur when an event fires. See individual events for descriptions and use {@link Api.DEBUG.EVENTS} to log and analyze events.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public on(eventName: PDFViewerEvent, callback: Function): void {\r\n        this._eventStore.on(eventName, callback);\r\n    }\r\n\r\n    /**\r\n     * Deregister an event that has been registered with {@link on} or {@link once}.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public off(eventName: PDFViewerEvent, callback: Function): void {\r\n        this._eventStore.off(eventName, callback);\r\n    }\r\n\r\n    /**\r\n     * Like {@link on} but only fires on the next occurrence.\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    public once(eventName: PDFViewerEvent, callback: Function): void {\r\n        this._eventStore.once(eventName, callback);\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // private static logEvent(key: string, ...args) {\r\n    //     console.warn(key);\r\n    //     console.warn(args);\r\n    // }\r\n\r\n    public async close(): Promise<any> {\r\n        this._eventStore.fire('viewerClosed', this);\r\n        return super.close();\r\n    }\r\n\r\n    /**\r\n     * Show the current page to GMs.\r\n     */\r\n    protected showTo(event: MouseEvent) {\r\n        const pdfData = this.pdfData;\r\n        pdfData.offset = 0;\r\n\r\n        const ids = getUserIdsExceptMe();\r\n        if (event.shiftKey) {\r\n            new SetViewEvent(ids, pdfData, this.page).emit();\r\n        } else {\r\n            new PlayerSelect(ids, (filteredIds) => {\r\n                new SetViewEvent(filteredIds, pdfData, this.page).emit();\r\n            }).render(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wait for the internal PDFjs viewer to be ready and usable.\r\n     */\r\n    protected getViewer(): Promise<PDFjsViewer> {\r\n        if (this._viewer) {\r\n            return Promise.resolve(this._viewer);\r\n        }\r\n\r\n        return new Promise<any>((resolve) => {\r\n            let timeout;\r\n            const returnOrWait = () => {\r\n                // If our window has finished initializing...\r\n                if (this._frame) {\r\n                    // If PDFjs has finished initializing...\r\n                    if (this._frame.contentWindow && this._frame.contentWindow['PDFViewerApplication']) {\r\n                        const viewer = this._frame.contentWindow['PDFViewerApplication'];\r\n                        resolve(viewer);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // If any ifs fall through, try again in a few ms\r\n                timeout = setTimeout(returnOrWait, 5);\r\n            };\r\n            returnOrWait();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Wait for the internal PDFjs eventBus to be ready and usable.\r\n     */\r\n    protected getEventBus(): Promise<PDFjsEventBus> {\r\n        if (this._eventBus) {\r\n            return Promise.resolve(this._eventBus);\r\n        }\r\n\r\n        return new Promise<any>((resolve) => {\r\n            this.getViewer().then((viewer) => {\r\n                let timeout;\r\n                const returnOrWait = () => {\r\n                    if (viewer.eventBus) {\r\n                        resolve(viewer.eventBus);\r\n                        return;\r\n                    }\r\n                    timeout = setTimeout(returnOrWait, 5);\r\n                };\r\n                returnOrWait();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finish the download and return the byte array for the file.\r\n     */\r\n    public download(): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>(async (resolve) => {\r\n            const viewer = await this.getViewer();\r\n            let timeout;\r\n            const returnOrWait = () => {\r\n                if (viewer.downloadComplete) {\r\n                    resolve(viewer.pdfDocument.getData());\r\n                    return;\r\n                }\r\n\r\n                timeout = setTimeout(returnOrWait, 50);\r\n            };\r\n            returnOrWait();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open a PDF\r\n     * @param pdfSource A URL or byte array to open.\r\n     * @param page The initial page to open to\r\n     */\r\n    public async open(pdfSource: string | Uint8Array, page?: number) {\r\n        const pdfjsViewer = await this.getViewer();\r\n\r\n        if (page) {\r\n            pdfjsViewer.initialBookmark = `page=${page}`;\r\n        }\r\n\r\n        await pdfjsViewer.open(pdfSource);\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}